{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\nexport { app, auth, db };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACrE,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/admin-db.ts"],"sourcesContent":["\nimport { db } from './firebase';\nimport { \n    collection, \n    doc, \n    getDoc, \n    getDocs, \n    addDoc, \n    updateDoc, \n    deleteDoc, \n    query, \n    where, \n    orderBy,\n    writeBatch,\n    Timestamp\n} from 'firebase/firestore';\nimport type { Cow, FeedLog, FoodName, MilkLog, Customer, Product, Order, OrderItem, OrderStatus } from '@/types/admin';\n// import { ALL_FOOD_ITEMS } from '@/types/admin'; // ALL_FOOD_ITEMS is used for client-side form generation, not stored in DB\nimport { format, parseISO, differenceInCalendarDays, isWithinInterval, startOfDay, subYears } from 'date-fns';\n\n// Collection references\nconst cowsCollectionRef = collection(db, 'cows');\nconst feedLogsCollectionRef = collection(db, 'feedLogs');\nconst milkLogsCollectionRef = collection(db, 'milkLogs');\nconst customersCollectionRef = collection(db, 'customers');\nconst productsCollectionRef = collection(db, 'products');\nconst ordersCollectionRef = collection(db, 'orders');\n\n/*\n// Mock Data (Commented out - Seed this data into your Firestore collections)\n\nlet cows_mock: Cow[] = [\n  { id: '1', name: 'Lakshmi', age: 7, dateOfBirth: format(subYears(new Date(), 7), 'yyyy-MM-dd'), breed: 'GIR', gender: 'Female', lactation: 'Lactating - 3rd', mother: 'Kamadhenu', father: 'Nandi', description: 'A gentle and nurturing matriarch, known for her calm demeanor and high-quality milk.', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png' },\n  { id: '2', name: 'Ganga', age: 5, dateOfBirth: format(subYears(new Date(), 5), 'yyyy-MM-dd'), breed: 'GIR', gender: 'Female', lactation: 'Dry', mother: 'Yamuna', father: 'Nandi Jr.', description: 'Named after the holy river, Ganga is a spirited cow with a playful personality.', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png'  },\n  { id: '3', name: 'Saraswati', age: 6, dateOfBirth: format(subYears(new Date(), 6), 'yyyy-MM-dd'), breed: 'GIR', gender: 'Female', lactation: 'Heifer', mother: 'Gayatri', father: 'Brahma Bull', description: 'Wise and serene, Saraswati is a picture of health and vitality.', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png'  },\n  { id: '4', name: 'Krishna', age: 4, dateOfBirth: format(subYears(new Date(), 4), 'yyyy-MM-dd'), breed: 'GIR', gender: 'Male', lactation: 'Bull - Breeding', description: 'A strong and healthy bull.', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png'  },\n];\n\nlet feedLogs_mock: FeedLog[] = [\n    { \n        id: 'fl1', \n        cowId: '1', \n        date: new Date(Date.now() - 86400000).toISOString().split('T')[0], \n        foodName: 'READYMADE FEED',\n        quantityKg: 5,\n        notes: 'Good appetite', \n        dateAdded: new Date().toISOString(), \n        lastUpdated: new Date().toISOString() \n    },\n    { \n        id: 'fl2', \n        cowId: '1', \n        date: new Date(Date.now() - 86400000).toISOString().split('T')[0], \n        foodName: 'NEPIER MAKAI',\n        quantityKg: 15,\n        notes: 'Good appetite', // Notes are duplicated for the day\n        dateAdded: new Date().toISOString(), \n        lastUpdated: new Date().toISOString() \n    },\n];\n\nlet milkLogs_mock: MilkLog[] = [\n    {\n        id: 'ml1',\n        cowId: '1',\n        date: new Date(Date.now() - 86400000).toISOString().split('T')[0], \n        timeOfDay: 'Morning',\n        quantityLiters: 8,\n        fatPercentage: 4.2,\n        notes: 'Normal yield',\n        dateAdded: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n    },\n];\n\nlet customers_mock: Customer[] = [\n    { id: 'cust1', name: 'Arjun Patel', email: 'arjun.patel@example.com', phone: '123-456-7890', addressLine1: '12 Vedic Lane', addressLine2: 'Apt 3B', city: 'Ayodhya', stateOrProvince: 'Uttar Pradesh', postalCode: '12345', googleMapsPinLink: 'https://maps.app.goo.gl/examplePinArjun', joinDate: new Date(Date.now() - 86400000 * 30).toISOString().split('T')[0], dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString()},\n    { id: 'cust2', name: 'Priya Sharma', email: 'priya.sharma@example.com', phone: '987-654-3210', addressLine1: '45 Dharma Rd', city: 'Vrindavan', stateOrProvince: 'Uttar Pradesh', postalCode: '67890',googleMapsPinLink: 'https://maps.app.goo.gl/examplePinPriya', joinDate: new Date(Date.now() - 86400000 * 60).toISOString().split('T')[0], dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString()},\n];\n\nlet products_mock: Product[] = [\n    { id: 'prod1', name: 'Pure GIR Cow A2 Milk', description: 'Fresh, raw A2 milk.', pricePerUnit: 8, unit: 'liter', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png' },\n    { id: 'prod2', name: 'Artisanal GIR Cow Ghee', description: 'Traditional Vedic Ghee.', pricePerUnit: 25, unit: 'kg', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png' },\n    { id: 'prod3', name: 'Organic GIR Cow Curd', description: 'Creamy probiotic curd.', pricePerUnit: 6, unit: 'kg', dateAdded: new Date().toISOString(), lastUpdated: new Date().toISOString(), imageUrl: 'https://placehold.co/100x100.png' },\n];\n\n// Initial Order Mock requires getCustomerDetailsForOrder_mock\nconst getCustomerDetailsForOrder_mock = (customerId: string): Partial<Order> => {\n    const customer = customers_mock.find(c => c.id === customerId);\n    if (!customer) return { customerName: 'Unknown Customer' };\n    return {\n        customerName: customer.name,\n        customerPhone: customer.phone,\n        customerAddressLine1: customer.addressLine1,\n        customerAddressLine2: customer.addressLine2,\n        customerCity: customer.city,\n        customerPostalCode: customer.postalCode,\n        customerGoogleMapsPinLink: customer.googleMapsPinLink,\n    };\n};\n\nlet orders_mock: Order[] = [\n    { \n        id: 'ord1', \n        orderNumber: `ORD-${Date.now() - 86400000 * 3}`, \n        customerId: 'cust1',\n        ...getCustomerDetailsForOrder_mock('cust1'),\n        orderDate: format(new Date(Date.now() - 86400000 * 3), 'yyyy-MM-dd'), \n        deliveryDateScheduledStart: format(new Date(Date.now() - 86400000 * 2), 'yyyy-MM-dd'), \n        deliveryDateScheduledEnd: format(new Date(Date.now() - 86400000 * 2), 'yyyy-MM-dd'),\n        deliveryDateActual: format(new Date(Date.now() - 86400000 * 2), 'yyyy-MM-dd'),\n        items: [ \n            { productId: 'prod1', productName: 'Pure GIR Cow A2 Milk', quantity: 2, unitPrice: 8, itemTotal: 16 }, \n            { productId: 'prod2', productName: 'Artisanal GIR Cow Ghee', quantity: 1, unitPrice: 25, itemTotal: 25 }\n        ],\n        subTotal: 41, \n        deliveryCharge: 5,\n        discount: 0,\n        grandTotal: 46, \n        status: 'Delivered',\n        paymentStatus: 'Paid',\n        notes: 'Delivered yesterday morning.',\n        dateAdded: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n    },\n     { \n        id: 'ord2', \n        orderNumber: `ORD-${Date.now() - 86400000}`, \n        customerId: 'cust2',\n        ...getCustomerDetailsForOrder_mock('cust2'),\n        orderDate: format(new Date(Date.now() - 86400000), 'yyyy-MM-dd'), \n        deliveryDateScheduledStart: format(new Date(), 'yyyy-MM-dd'), \n        deliveryDateScheduledEnd: format(new Date(Date.now() + 86400000), 'yyyy-MM-dd'), \n        items: [\n            { productId: 'prod3', productName: 'Organic GIR Cow Curd', quantity: 3, unitPrice: 6, itemTotal: 36 } \n        ],\n        subTotal: 36, \n        deliveryCharge: 0,\n        discount: 2,\n        grandTotal: 34,\n        status: 'Confirmed',\n        paymentStatus: 'Pending',\n        notes: 'Scheduled for delivery today and tomorrow.',\n        dateAdded: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n    },\n    { \n        id: 'ord3', \n        orderNumber: `ORD-${Date.now()}`, \n        customerId: 'cust1',\n        ...getCustomerDetailsForOrder_mock('cust1'),\n        orderDate: format(new Date(), 'yyyy-MM-dd'), \n        deliveryDateScheduledStart: format(new Date(Date.now() + 86400000), 'yyyy-MM-dd'), \n        deliveryDateScheduledEnd: format(new Date(Date.now() + 86400000), 'yyyy-MM-dd'), \n        items: [\n            { productId: 'prod1', productName: 'Pure GIR Cow A2 Milk', quantity: 4, unitPrice: 8, itemTotal: 32 }\n        ],\n        subTotal: 32, \n        deliveryCharge: 3,\n        discount: 0,\n        grandTotal: 35,\n        status: 'Processing',\n        paymentStatus: 'Paid',\n        notes: 'Urgent order for tomorrow.',\n        dateAdded: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n    }\n];\n*/\n\n// Cow Functions\nexport const getCows = async (): Promise<Cow[]> => {\n  const q = query(cowsCollectionRef, orderBy('name'));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Cow));\n};\n\nexport const getCowById = async (id: string): Promise<Cow | undefined> => {\n  const docRef = doc(db, 'cows', id);\n  const docSnap = await getDoc(docRef);\n  return docSnap.exists() ? ({ id: docSnap.id, ...docSnap.data() } as Cow) : undefined;\n};\n\nexport const addCow = async (cowData: Omit<Cow, 'id' | 'dateAdded' | 'lastUpdated'>): Promise<Cow> => {\n  const now = new Date().toISOString();\n  const dataToSave = { \n    ...cowData, \n    dateAdded: now,\n    lastUpdated: now,\n    lactation: cowData.lactation || undefined,\n    mother: cowData.mother || undefined,\n    father: cowData.father || undefined,\n    dateOfBirth: cowData.dateOfBirth || undefined,\n  };\n  const docRef = await addDoc(cowsCollectionRef, dataToSave);\n  return { id: docRef.id, ...dataToSave };\n};\n\nexport const updateCow = async (id: string, cowData: Partial<Omit<Cow, 'id' | 'dateAdded' | 'lastUpdated'>>): Promise<Cow | null> => {\n  const docRef = doc(db, 'cows', id);\n  await updateDoc(docRef, { ...cowData, lastUpdated: new Date().toISOString() });\n  const updatedDocSnap = await getDoc(docRef);\n  return updatedDocSnap.exists() ? ({ id: updatedDocSnap.id, ...updatedDocSnap.data() } as Cow) : null;\n};\n\nexport const deleteCow = async (id: string): Promise<boolean> => {\n  try {\n    const docRef = doc(db, 'cows', id);\n    await deleteDoc(docRef);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting cow:\", error);\n    return false;\n  }\n};\n\n// FeedLog Functions\nexport const getFeedLogs = async (): Promise<FeedLog[]> => {\n  const q = query(feedLogsCollectionRef, orderBy('date', 'desc'));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as FeedLog));\n};\n\nexport const getFeedLogsByCowAndDate = async (cowId: string, date: string): Promise<FeedLog[]> => {\n  const q = query(feedLogsCollectionRef, where('cowId', '==', cowId), where('date', '==', date));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as FeedLog));\n};\n\nexport const saveDailyFeedLogs = async (cowId: string, date: string, items: { foodName: FoodName, quantityKg: number }[], notes?: string): Promise<FeedLog[]> => {\n  const batch = writeBatch(db);\n  const now = new Date().toISOString();\n\n  // 1. Delete existing logs for this cow and date\n  const q = query(feedLogsCollectionRef, where('cowId', '==', cowId), where('date', '==', date));\n  const existingLogsSnapshot = await getDocs(q);\n  existingLogsSnapshot.docs.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n\n  // 2. Add new logs\n  const newLogs: FeedLog[] = [];\n  for (const item of items) {\n    if (item.quantityKg > 0) {\n      // Create a new doc reference for each log entry to get an ID for return\n      const newLogRef = doc(collection(db, 'feedLogs')); \n      const newLogData = {\n        cowId,\n        date,\n        foodName: item.foodName,\n        quantityKg: item.quantityKg,\n        notes: notes || undefined,\n        dateAdded: now,\n        lastUpdated: now,\n      };\n      batch.set(newLogRef, newLogData);\n      newLogs.push({ id: newLogRef.id, ...newLogData });\n    }\n  }\n\n  await batch.commit();\n  return newLogs;\n};\n\nexport const deleteFeedLogsForDay = async (cowId: string, date: string): Promise<boolean> => {\n  const batch = writeBatch(db);\n  const q = query(feedLogsCollectionRef, where('cowId', '==', cowId), where('date', '==', date));\n  const logsSnapshot = await getDocs(q);\n  \n  if (logsSnapshot.empty) return false; // No logs to delete\n\n  logsSnapshot.docs.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n  await batch.commit();\n  return true;\n};\n\n\n// MilkLog Functions\nexport const getMilkLogs = async (): Promise<MilkLog[]> => {\n    const q = query(milkLogsCollectionRef, orderBy('date', 'desc'), orderBy('timeOfDay', 'asc')); // Morning first\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as MilkLog));\n};\n\nexport const getMilkLogById = async (id: string): Promise<MilkLog | undefined> => {\n    const docRef = doc(db, 'milkLogs', id);\n    const docSnap = await getDoc(docRef);\n    return docSnap.exists() ? ({ id: docSnap.id, ...docSnap.data() } as MilkLog) : undefined;\n};\n\nexport const addMilkLog = async (milkLogData: Omit<MilkLog, 'id' | 'dateAdded' | 'lastUpdated'>): Promise<MilkLog> => {\n    const now = new Date().toISOString();\n    const dataToSave = { \n        ...milkLogData, \n        dateAdded: now, \n        lastUpdated: now \n    };\n    const docRef = await addDoc(milkLogsCollectionRef, dataToSave);\n    return { id: docRef.id, ...dataToSave };\n};\n\nexport const updateMilkLog = async (id: string, milkLogData: Partial<Omit<MilkLog, 'id' | 'dateAdded' | 'lastUpdated'>>): Promise<MilkLog | null> => {\n    const docRef = doc(db, 'milkLogs', id);\n    await updateDoc(docRef, { ...milkLogData, lastUpdated: new Date().toISOString() });\n    const updatedDocSnap = await getDoc(docRef);\n    return updatedDocSnap.exists() ? ({ id: updatedDocSnap.id, ...updatedDocSnap.data() } as MilkLog) : null;\n};\n\nexport const deleteMilkLog = async (id: string): Promise<boolean> => {\n  try {\n    const docRef = doc(db, 'milkLogs', id);\n    await deleteDoc(docRef);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting milk log:\", error);\n    return false;\n  }\n};\n\n// Customer Functions\nexport const getCustomers = async (): Promise<Customer[]> => {\n  const q = query(customersCollectionRef, orderBy('name'));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Customer));\n};\n\nexport const getCustomerById = async (id: string): Promise<Customer | undefined> => {\n  if (!id) return undefined;\n  const docRef = doc(db, 'customers', id);\n  const docSnap = await getDoc(docRef);\n  return docSnap.exists() ? ({ id: docSnap.id, ...docSnap.data() } as Customer) : undefined;\n};\n\nexport const addCustomer = async (customerData: Omit<Customer, 'id' | 'dateAdded' | 'lastUpdated'>): Promise<Customer> => {\n  const now = new Date().toISOString();\n  const dataToSave = { \n    ...customerData, \n    dateAdded: now, \n    lastUpdated: now \n  };\n  const docRef = await addDoc(customersCollectionRef, dataToSave);\n  return { id: docRef.id, ...dataToSave };\n};\n\nexport const updateCustomer = async (id: string, customerData: Partial<Omit<Customer, 'id' | 'dateAdded' | 'lastUpdated'>>): Promise<Customer | null> => {\n  const docRef = doc(db, 'customers', id);\n  await updateDoc(docRef, { ...customerData, lastUpdated: new Date().toISOString() });\n  const updatedDocSnap = await getDoc(docRef);\n  return updatedDocSnap.exists() ? ({ id: updatedDocSnap.id, ...updatedDocSnap.data() } as Customer) : null;\n};\n\nexport const deleteCustomer = async (id: string): Promise<boolean> => {\n  try {\n    // Note: Deleting associated orders is a complex operation and typically handled with care.\n    // For simplicity here, we're just deleting the customer.\n    // In a real app, consider how to handle/archive orders or use Firestore functions for cascading deletes.\n    const docRef = doc(db, 'customers', id);\n    await deleteDoc(docRef);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting customer:\", error);\n    return false;\n  }\n};\n\n// Product Functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const q = query(productsCollectionRef, orderBy('name'));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Product));\n};\n\nexport const getProductById = async (id: string): Promise<Product | undefined> => {\n  if (!id) return undefined;\n  const docRef = doc(db, 'products', id);\n  const docSnap = await getDoc(docRef);\n  return docSnap.exists() ? ({ id: docSnap.id, ...docSnap.data() } as Product) : undefined;\n};\n\n// Helper for denormalizing customer data into orders\nconst getCustomerDetailsForOrder = async (customerId: string): Promise<Partial<Order>> => {\n    const customer = await getCustomerById(customerId);\n    if (!customer) return { customerName: 'Unknown Customer' };\n    return {\n        customerName: customer.name,\n        customerPhone: customer.phone,\n        customerAddressLine1: customer.addressLine1,\n        customerAddressLine2: customer.addressLine2,\n        customerCity: customer.city,\n        customerPostalCode: customer.postalCode,\n        customerGoogleMapsPinLink: customer.googleMapsPinLink,\n    };\n};\n\n// Helper for calculating order totals based on product prices from Firestore\nconst calculateOrderTotals = async (\n    inputItems: Omit<OrderItem, 'itemTotal' | 'productName' | 'unitPrice'>[], \n    deliveryCharge: number = 0, \n    discount: number = 0,\n    numberOfDays: number = 1 \n): Promise<Pick<Order, 'subTotal' | 'grandTotal' | 'items'>> => {\n  \n  const processedItems: OrderItem[] = [];\n  for (const item of inputItems) {\n    const product = await getProductById(item.productId);\n    const unitPrice = product?.pricePerUnit || 0;\n    processedItems.push({\n      productId: item.productId,\n      quantity: item.quantity, \n      productName: product?.name || 'Unknown Product',\n      unitPrice: unitPrice,\n      itemTotal: item.quantity * unitPrice * numberOfDays, \n    });\n  }\n\n  const subTotal = processedItems.reduce((sum, item) => sum + (item.itemTotal || 0), 0);\n  const grandTotal = subTotal + deliveryCharge - discount; \n  return { subTotal, grandTotal, items: processedItems };\n};\n\n\n// Order Functions\nexport const getOrders = async (): Promise<Order[]> => {\n  const q = query(ordersCollectionRef, orderBy('orderDate', 'desc'));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Order));\n};\n\nexport const getOrderById = async (id: string): Promise<Order | undefined> => {\n  const docRef = doc(db, 'orders', id);\n  const docSnap = await getDoc(docRef);\n  return docSnap.exists() ? ({ id: docSnap.id, ...docSnap.data() } as Order) : undefined;\n};\n\nexport const getOrdersByCustomerId = async (customerId: string): Promise<Order[]> => {\n  const q = query(ordersCollectionRef, where('customerId', '==', customerId), orderBy('orderDate', 'desc'));\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Order));\n};\n\nexport const getOrdersForDeliveryByDate = async (deliveryDate: string): Promise<Order[]> => {\n    const targetDateStr = format(parseISO(deliveryDate), 'yyyy-MM-dd'); // Ensure consistent format\n    const relevantStatuses: OrderStatus[] = ['Confirmed', 'Processing', 'Out for Delivery'];\n    \n    // Query for orders where deliveryDateScheduledStart is on or before the target date\n    // and status is one of the relevant ones.\n    // Client-side filtering for deliveryDateScheduledEnd >= targetDate will be needed\n    // because Firestore doesn't support range queries on different fields simultaneously.\n    const q = query(ordersCollectionRef, \n        where('deliveryDateScheduledStart', '<=', targetDateStr),\n        where('status', 'in', relevantStatuses)\n        // orderBy('deliveryDateScheduledStart') // Optional: May require an index\n    );\n    const querySnapshot = await getDocs(q);\n    \n    const ordersForDate = querySnapshot.docs\n        .map(doc => ({ id: doc.id, ...doc.data() } as Order))\n        .filter(order => {\n            // Client-side filter for end date\n            return order.deliveryDateScheduledEnd >= targetDateStr;\n        })\n        .sort((a, b) => (a.customerName || '').localeCompare(b.customerName || '')); // Sort by customer name\n\n    return ordersForDate;\n};\n\n\ntype AddOrderData = Omit<Order, 'id' | 'orderNumber' | 'subTotal' | 'grandTotal' | 'dateAdded' | 'lastUpdated' | 'customerName' | 'customerPhone' | 'customerAddressLine1' | 'customerAddressLine2' | 'customerCity' | 'customerPostalCode' | 'customerGoogleMapsPinLink' | 'items' | 'deliveryDateActual'> & { \n  items: Omit<OrderItem, 'itemTotal' | 'productName' | 'unitPrice'>[] \n};\n\nexport const addOrder = async (orderData: AddOrderData): Promise<Order> => {\n  let numberOfDays = 1;\n  if (orderData.deliveryDateScheduledStart && orderData.deliveryDateScheduledEnd) {\n      const start = parseISO(orderData.deliveryDateScheduledStart);\n      const end = parseISO(orderData.deliveryDateScheduledEnd);\n      numberOfDays = differenceInCalendarDays(end, start) + 1;\n      if (numberOfDays < 1) numberOfDays = 1;\n  }\n\n  const totals = await calculateOrderTotals(orderData.items, orderData.deliveryCharge, orderData.discount, numberOfDays);\n  const customerInfo = await getCustomerDetailsForOrder(orderData.customerId);\n  const now = new Date().toISOString();\n  \n  const newOrderData = {\n    ...orderData,\n    ...customerInfo,\n    orderNumber: `ORD-${Date.now()}`, // Firestore generates IDs, so this is for display\n    items: totals.items,\n    subTotal: totals.subTotal,\n    grandTotal: totals.grandTotal,\n    dateAdded: now,\n    lastUpdated: now,\n  };\n  const docRef = await addDoc(ordersCollectionRef, newOrderData);\n  return { id: docRef.id, ...newOrderData };\n};\n\ntype UpdateOrderData = Partial<Omit<Order, 'id' | 'orderNumber' | 'subTotal' | 'grandTotal' | 'dateAdded' | 'lastUpdated' | 'customerName' | 'customerPhone' | 'customerAddressLine1' | 'customerAddressLine2' | 'customerCity' | 'customerPostalCode' | 'customerGoogleMapsPinLink' | 'items' >> & { \n  items?: Omit<OrderItem, 'itemTotal' | 'productName' | 'unitPrice'>[] \n};\n\nexport const updateOrder = async (id: string, orderData: UpdateOrderData): Promise<Order | null> => {\n  const docRef = doc(db, 'orders', id);\n  const existingOrderSnap = await getDoc(docRef);\n  if (!existingOrderSnap.exists()) return null;\n  const existingOrder = existingOrderSnap.data() as Order;\n\n  let customerInfo = {\n      customerName: existingOrder.customerName,\n      customerPhone: existingOrder.customerPhone,\n      customerAddressLine1: existingOrder.customerAddressLine1,\n      customerAddressLine2: existingOrder.customerAddressLine2,\n      customerCity: existingOrder.customerCity,\n      customerPostalCode: existingOrder.customerPostalCode,\n      customerGoogleMapsPinLink: existingOrder.customerGoogleMapsPinLink,\n  };\n\n  if (orderData.customerId && orderData.customerId !== existingOrder.customerId) {\n      customerInfo = await getCustomerDetailsForOrder(orderData.customerId);\n  } else if (!existingOrder.customerName && existingOrder.customerId) {\n      // If existing order somehow missed customer details but had ID\n      customerInfo = await getCustomerDetailsForOrder(existingOrder.customerId);\n  }\n  \n  const deliveryDateScheduledStart = orderData.deliveryDateScheduledStart || existingOrder.deliveryDateScheduledStart;\n  const deliveryDateScheduledEnd = orderData.deliveryDateScheduledEnd || existingOrder.deliveryDateScheduledEnd;\n  let numberOfDays = 1;\n  if (deliveryDateScheduledStart && deliveryDateScheduledEnd) {\n      const start = parseISO(deliveryDateScheduledStart);\n      const end = parseISO(deliveryDateScheduledEnd);\n      numberOfDays = differenceInCalendarDays(end, start) + 1;\n      if (numberOfDays < 1) numberOfDays = 1;\n  }\n  \n  const itemsToProcess = orderData.items || existingOrder.items.map(i => ({productId: i.productId, quantity: i.quantity})); \n  const deliveryCharge = orderData.deliveryCharge !== undefined ? orderData.deliveryCharge : existingOrder.deliveryCharge;\n  const discount = orderData.discount !== undefined ? orderData.discount : existingOrder.discount;\n  \n  const totals = await calculateOrderTotals(itemsToProcess, deliveryCharge, discount, numberOfDays);\n\n  const dataToUpdate = {\n    ...orderData,\n    ...customerInfo, // Apply potentially updated customer details\n    items: totals.items, \n    subTotal: totals.subTotal,\n    grandTotal: totals.grandTotal,\n    deliveryDateScheduledStart, \n    deliveryDateScheduledEnd,   \n    lastUpdated: new Date().toISOString(),\n  }; \n\n  // Remove undefined fields from dataToUpdate before sending to Firestore\n  Object.keys(dataToUpdate).forEach(key => {\n    if ((dataToUpdate as any)[key] === undefined) {\n      delete (dataToUpdate as any)[key];\n    }\n  });\n\n  await updateDoc(docRef, dataToUpdate);\n  const updatedDocSnap = await getDoc(docRef);\n  return updatedDocSnap.exists() ? ({ id: updatedDocSnap.id, ...updatedDocSnap.data() } as Order) : null;\n};\n\nexport const deleteOrder = async (id: string): Promise<boolean> => {\n  try {\n    const docRef = doc(db, 'orders', id);\n    await deleteDoc(docRef);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting order:\", error);\n    return false;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/products/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { getCustomers, getOrdersByCustomerId as dbGetOrdersByCustomerId, updateCustomer as dbUpdateCustomer } from '@/lib/admin-db';\nimport type { Order, Customer } from '@/types/admin';\nimport { z } from 'zod';\n\ninterface SearchOrdersResult {\n  success: boolean;\n  orders?: Order[];\n  customer?: Customer | null;\n  message?: string;\n}\n\nexport async function getOrdersByPhoneNumberAction(phoneNumber: string): Promise<SearchOrdersResult> {\n  const numericInputPhone = phoneNumber.replace(/\\D/g, ''); // Strip non-digits from input\n\n  if (!numericInputPhone || numericInputPhone.length < 10) { // Validate length of numeric part\n    return { success: false, message: 'Please enter a valid phone number (at least 10 digits).' };\n  }\n\n  try {\n    const allCustomers: Customer[] = await getCustomers();\n    // Normalize stored phone numbers for comparison\n    const foundCustomer = allCustomers.find(customer => {\n      const numericDbPhone = customer.phone.replace(/\\D/g, '');\n      return numericDbPhone === numericInputPhone;\n    });\n\n    if (!foundCustomer) {\n      return { success: false, customer: null, message: 'No customer found with this phone number.' };\n    }\n\n    const customerOrders: Order[] = await dbGetOrdersByCustomerId(foundCustomer.id);\n\n    if (customerOrders.length === 0) {\n      return { \n        success: true, \n        orders: [], \n        customer: foundCustomer,\n        message: `No orders found for ${foundCustomer.name}.` \n      };\n    }\n\n    return { success: true, orders: customerOrders, customer: foundCustomer };\n\n  } catch (error) {\n    console.error('Error fetching orders by phone number:', error);\n    return { success: false, customer: null, message: 'An unexpected error occurred while searching for orders.' };\n  }\n}\n\n\n// Schema for customer self-service profile update\nconst customerProfileUpdateSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email.' }).optional().or(z.literal('')),\n  addressLine1: z.string().min(5, { message: 'Address Line 1 must be at least 5 characters.' }),\n  addressLine2: z.string().optional().or(z.literal('')),\n  city: z.string().min(2, { message: 'City must be at least 2 characters.' }),\n  stateOrProvince: z.string().min(2, {message: 'State/Province must be at least 2 characters.'}).optional().or(z.literal('')),\n  postalCode: z.string().min(5, { message: 'Postal code must be at least 5 characters.' }),\n  googleMapsPinLink: z.string().url({message: \"Please enter a valid URL for the Google Maps pin.\"}).optional().or(z.literal('')),\n});\n\nexport type CustomerProfileUpdateFormState = {\n  message: string;\n  errors?: {\n    email?: string[];\n    addressLine1?: string[];\n    addressLine2?: string[];\n    city?: string[];\n    stateOrProvince?: string[];\n    postalCode?: string[];\n    googleMapsPinLink?: string[];\n    _form?: string[];\n  };\n  success: boolean;\n  updatedCustomer?: Customer;\n};\n\nexport async function updateCustomerProfileAction(\n  customerId: string, \n  prevState: CustomerProfileUpdateFormState, \n  formData: FormData\n): Promise<CustomerProfileUpdateFormState> {\n  if (!customerId) {\n    return { message: 'Customer ID is missing.', success: false, errors: { _form: ['Customer ID is required.'] } };\n  }\n\n  const validatedFields = customerProfileUpdateSchema.safeParse({\n    email: formData.get('email') || undefined,\n    addressLine1: formData.get('addressLine1'),\n    addressLine2: formData.get('addressLine2') || undefined,\n    city: formData.get('city'),\n    stateOrProvince: formData.get('stateOrProvince') || undefined,\n    postalCode: formData.get('postalCode'),\n    googleMapsPinLink: formData.get('googleMapsPinLink') || undefined,\n  });\n\n  if (!validatedFields.success) {\n    return {\n      message: 'Validation failed. Please check your inputs.',\n      errors: validatedFields.error.flatten().fieldErrors,\n      success: false,\n    };\n  }\n\n  try {\n    // Only pass validated (and thus allowed) fields to the db update function\n    const dataToUpdate: Partial<Omit<Customer, 'id' | 'dateAdded' | 'lastUpdated' | 'name' | 'phone' | 'joinDate'>> = {\n        ...validatedFields.data\n    };\n\n    const updatedCustomer = await dbUpdateCustomer(customerId, dataToUpdate);\n    if (!updatedCustomer) {\n      return { message: `Customer with ID ${customerId} not found.`, success: false, errors: { _form: ['Customer not found.'] } };\n    }\n    // No revalidatePath needed here as this is a client-driven update, \n    // the calling component should refresh its state.\n    return { message: `Profile updated successfully.`, success: true, updatedCustomer };\n  } catch (error) {\n    console.error('Failed to update customer profile:', error);\n    return { message: 'Database error: Failed to update profile.', success: false, errors: { _form: ['An unexpected error occurred.'] } };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 828, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 909, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 969, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/product-card.tsx"],"sourcesContent":["import Image from 'next/image';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { ShoppingCart, Leaf } from 'lucide-react';\n\ninterface ProductCardProps {\n  name: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n  price?: string;\n  benefits: string[];\n  orderLink?: string;\n}\n\nexport default function ProductCard({ name, description, imageUrl, imageHint, price, benefits, orderLink = \"#order\" }: ProductCardProps) {\n  return (\n    <Card className=\"overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 flex flex-col h-full\">\n      <CardHeader className=\"p-0\">\n        <div className=\"aspect-square relative\">\n          <Image \n            src={imageUrl} \n            alt={name} \n            layout=\"fill\" \n            objectFit=\"cover\" \n            data-ai-hint={imageHint}\n            className=\"transition-transform duration-300 group-hover:scale-105\"\n          />\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6 flex-grow\">\n        <CardTitle className=\"font-headline text-2xl text-foreground mb-2\">{name}</CardTitle>\n        <CardDescription className=\"text-base text-muted-foreground mb-4\">{description}</CardDescription>\n        <div className=\"mb-4\">\n          <h4 className=\"font-semibold text-foreground mb-1\">Key Benefits:</h4>\n          <ul className=\"list-none space-y-1\">\n            {benefits.map((benefit, index) => (\n              <li key={index} className=\"flex items-start text-sm text-muted-foreground\">\n                <Leaf className=\"w-4 h-4 text-primary mr-2 mt-0.5 shrink-0\" />\n                {benefit}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-6 pt-0 flex flex-col sm:flex-row justify-between items-center\">\n        {price && <p className=\"text-xl font-bold text-primary mb-4 sm:mb-0\">{price}</p>}\n        <Button asChild className=\"w-full sm:w-auto shadow-md hover:shadow-lg transition-shadow\">\n          <Link href={orderLink}>\n            <ShoppingCart className=\"mr-2 h-4 w-4\" /> Order Now\n          </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;AAYe,SAAS,YAAY,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,QAAQ,EAAoB;IACrI,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;gBAAC,WAAU;0BACpB,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KAAK;wBACL,KAAK;wBACL,QAAO;wBACP,WAAU;wBACV,gBAAc;wBACd,WAAU;;;;;;;;;;;;;;;;0BAIhB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;kCAA+C;;;;;;kCACpE,8OAAC,gIAAA,CAAA,kBAAe;wBAAC,WAAU;kCAAwC;;;;;;kCACnE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAqC;;;;;;0CACnD,8OAAC;gCAAG,WAAU;0CACX,SAAS,GAAG,CAAC,CAAC,SAAS,sBACtB,8OAAC;wCAAe,WAAU;;0DACxB,8OAAC,kMAAA,CAAA,OAAI;gDAAC,WAAU;;;;;;4CACf;;uCAFM;;;;;;;;;;;;;;;;;;;;;;0BAQjB,8OAAC,gIAAA,CAAA,aAAU;gBAAC,WAAU;;oBACnB,uBAAS,8OAAC;wBAAE,WAAU;kCAA+C;;;;;;kCACtE,8OAAC,kIAAA,CAAA,SAAM;wBAAC,OAAO;wBAAC,WAAU;kCACxB,cAAA,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAM;;8CACV,8OAAC,sNAAA,CAAA,eAAY;oCAAC,WAAU;;;;;;gCAAiB;;;;;;;;;;;;;;;;;;;;;;;;AAMrD","debugId":null}},
    {"offset": {"line": 1136, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/products/customer-order-search.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/products/customer-order-search.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/products/customer-order-search.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqT,GAClV,mFACA","debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/products/customer-order-search.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/products/customer-order-search.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/products/customer-order-search.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 1164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/products/page.tsx"],"sourcesContent":["\nimport Image from 'next/image';\nimport ProductCard from '@/components/product-card';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { Milk, Leaf, ShieldCheck, Heart } from 'lucide-react';\nimport { Separator } from '@/components/ui/separator';\nimport CustomerOrderSearch from '@/components/products/customer-order-search';\n\nconst productsData = [\n  {\n    name: 'Pure GIR Cow A2 Milk',\n    description: 'Fresh, raw, and unprocessed A2 milk from our pasture-raised GIR cows. Delivered chilled to preserve its natural goodness.',\n    imageUrl: 'https://placehold.co/600x600.png',\n    imageHint: 'milk bottle glass',\n    price: '80 / liter',\n    benefits: ['Rich in A2 Beta-Casein Protein', 'Easier to digest', 'Boosts immunity', 'Supports bone health'],\n  },\n  {\n    name: 'Artisanal GIR Cow Ghee',\n    description: 'Traditionally prepared Vedic Ghee (clarified butter) from A2 milk. Golden, aromatic, and packed with nutrients.',\n    imageUrl: 'https://placehold.co/600x600.png',\n    imageHint: 'ghee jar product',\n    price: '500 / 500g',\n    benefits: ['Rich in Omega-3 & Omega-9', 'Aids digestion', 'Boosts metabolism', 'Nourishes skin and hair'],\n  },\n  {\n    name: 'Organic GIR Cow Curd (Dahi)',\n    description: 'Creamy, probiotic-rich curd made from our A2 milk. Set traditionally for an authentic taste and texture.',\n    imageUrl: 'https://placehold.co/600x600.png',\n    imageHint: 'curd bowl',\n    price: '40 / 500g',\n    benefits: ['Improves gut health', 'Rich in Calcium and Vitamin B12', 'Cooling effect on the body', 'Natural probiotic source'],\n  },\n  {\n    name: 'Hand-Churned GIR Cow Butter',\n    description: 'Delicious, unsalted white butter (Makkhan) made using traditional methods. Perfect for a healthy and tasty addition to your meals.',\n    imageUrl: 'https://placehold.co/600x600.png',\n    imageHint: 'butter block',\n    price: '120 / 250g',\n    benefits: ['Contains healthy fats', 'Rich in Vitamin A & D', 'No preservatives or artificial colors', 'Authentic traditional taste'],\n  },\n];\n\nconst qualityAspects = [\n  { icon: Leaf, title: \"100% Organic\", description: \"Our cows graze on pesticide-free pastures, ensuring milk free from harmful chemicals.\" },\n  { icon: ShieldCheck, title: \"A2 Protein Rich\", description: \"GIR cow milk is naturally rich in A2 beta-casein protein, known for its health benefits.\" },\n  { icon: Heart, title: \"Ethically Sourced\", description: \"We prioritize the well-being of our cows, ensuring they live happy, stress-free lives.\" },\n];\n\nexport default function ProductsPage() {\n  return (\n    <div className=\"bg-background min-h-screen\">\n      <section className=\"py-16 md:py-24 bg-gradient-to-br from-primary/10 via-background to-background\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <Milk className=\"w-16 h-16 text-primary mx-auto mb-6\" />\n          <h1 className=\"font-headline text-5xl md:text-6xl font-bold text-foreground\">\n            Our Pure & Organic <span className=\"text-primary\">Dairy Delights</span>\n          </h1>\n          <p className=\"mt-6 text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Discover the unique qualities and health benefits of products made from GIR cow milk. Each item is crafted with care, preserving the natural goodness and traditional flavors.\n          </p>\n        </div>\n      </section>\n\n      <section className=\"py-16 md:py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 gap-8\">\n            {productsData.map((product) => (\n              <ProductCard key={product.name} {...product} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <section id=\"quality\" className=\"py-16 md:py-24 bg-primary/5\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-headline text-4xl md:text-5xl font-bold text-foreground\">\n              The <span className=\"text-primary\">RamDairyFarm</span> Quality Promise\n            </h2>\n            <p className=\"mt-4 text-lg text-muted-foreground max-w-2xl mx-auto\">\n              We are committed to providing you with the highest quality, most wholesome dairy products.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {qualityAspects.map(aspect => (\n              <div key={aspect.title} className=\"text-center p-6 bg-card rounded-lg shadow-md hover:shadow-lg transition-shadow\">\n                <aspect.icon className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"font-headline text-2xl font-semibold text-foreground mb-2\">{aspect.title}</h3>\n                <p className=\"text-muted-foreground\">{aspect.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n      \n      <section id=\"order\" className=\"py-16 md:py-24\">\n        <CustomerOrderSearch />\n        \n        <div className=\"container mx-auto px-4 text-center mt-12 md:mt-16\">\n          <h2 className=\"font-headline text-4xl md:text-5xl font-bold text-foreground mb-6\">\n            Ready to Experience the Purity?\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-xl mx-auto mb-8\">\n            Currently, we are accepting orders via phone or email. Please contact us to place your order or inquire about delivery in your area. Online ordering coming soon!\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center items-center gap-6\">\n            <Button size=\"lg\" asChild className=\"shadow-lg\">\n              <a href=\"tel:+919979540446\">Call Us: (997) 954-0446</a>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" asChild className=\"shadow-lg\">\n              <a href=\"mailto:support@ramdairyfarm.in\">Email: support@ramdairyfarm.in</a>\n            </Button>\n          </div>\n           <p className=\"mt-12 text-sm text-muted-foreground\">\n            We are working on an online ordering system for your convenience. Stay tuned!\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}